%matplotlib inline
import ants
import matplotlib.pyplot as plt
import glob
import matplotlib.image as mpimg
import shutil
import matplotlib
def make_pngs(sesDir):
    cmap1 = matplotlib.colors.ListedColormap(['none', 'green', 'blue', 'red'])
    wdir = glob.glob(f'{sesDir}/wdir/*/nii_final/')[0]
    os.makedirs(f'./out/{sesDir}',exist_ok=True)
    img_s = ants.image_read(f'{sesDir}/segmentation_CT1.nii.gz').astype('uint8')
    img_s[0,0,1]=1
    img_s[0,0,2]=2
    img_s[0,0,3]=3 # Fix colormap
    (ants.image_read(f'{wdir}CT1.nii.gz')+8).plot(axis=2, filename=f'./out/{sesDir}/CT1.png')
    (ants.image_read(f'{wdir}FLAIR.nii.gz')+8).plot(axis=2, filename=f'./out/{sesDir}/FLAIR.png')
    (ants.image_read(f'{wdir}CT1.nii.gz')+8).plot(overlay = img_s, axis=2, overlay_cmap = cmap1, filename=f'./out/{sesDir}/CT1_seg.png')
    shutil.copy(f'{sesDir}/segmentation_CT1.nii.gz', f'./out/{sesDir}/segmentation_CT1.nii.gz')
    shutil.copy(f'{sesDir}/segmentation_native_CT1.nii.gz', f'./out/{sesDir}/segmentation_native_CT1.nii.gz')
def plot_img(sesDirs):
    fig, axs = plt.subplots(len(sesDirs),3,figsize=(11,6*len(sesDirs)))
    for i,sesDir in enumerate(sesDirs):
        axs[i,0].imshow(mpimg.imread(f'./out/{sesDir}/CT1.png'))
        axs[i,0].axis('off')
        axs[i,2].imshow(mpimg.imread(f'./out/{sesDir}/FLAIR.png'))
        axs[i,2].axis('off')
        axs[i,1].imshow(mpimg.imread(f'./out/{sesDir}/CT1_seg.png'))
        axs[i,1].axis('off')
        axs[i,1].set_title(sesDir.replace('/Imaging/',''))
        plt.tight_layout()
    plt.savefig('./out/'+sesDir.split('/')[2])














import os
import glob
import subprocess
from picture_nnunet_package.doInference import do_segmentation
import torch

for ptDir in ptDirs[:6]:
    with ZipFile('imaging.zip', 'r') as zipObj:
        for f in listOfFileNames:
            if f.startswith(ptDir):
                zipObj.extract(f)
    ptID = os.path.split(ptDir)[1]
    sesDirs = glob.glob(f'./{ptDir}/*')
    for sesDir in sesDirs:
        sesID = os.path.split(sesDir)[1]
        imgs = {}
        for mod in ['CT1','T1','T2','FLAIR']:
            imgs[mod] = glob.glob(sesDir+'/'+mod+'*.nii.gz')[0]
        if 'week-000' in sesID:
            sessionType = 'preop'
        else:
            sessionType = 'postop_beta'

        do_segmentation(imgs['CT1'], t1=imgs['T1'], t2=imgs['T2'], flair=imgs['FLAIR'], sessionType =sessionType, remove_intermediate_files = False, mni=False, wdir_postfix='random',skip_skullstrip=True)
        torch.cuda.empty_cache()
        my_seg = glob.glob(f'{sesDir}/segmentation_native*.nii.gz')[0]
        make_pngs(sesDir)
        shutil.rmtree(sesDir)
    plot_img(sesDirs)






